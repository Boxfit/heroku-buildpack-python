#!/usr/bin/env bash

# This functionality will only activate if Django is in requirements.txt.

source $BIN_DIR/utils

# Location of 'manage.py', if it exists.
MANAGE_FILE=$(find . -maxdepth 3 -type f -name 'manage.py' -printf '%d\t%P\n' | sort -nk1 | cut -f2 | head -1)
MANAGE_FILE=${MANAGE_FILE:-fakepath}

# Ensure that Django is explicitly specified in requirements.txt
pip-grep -s requirements.txt django Django && DJANGO_INSTALLED=1

bpwatch start getstaticmanifest  # metrics collection

if [ -f "$MANAGE_FILE" ] && [ "$DJANGO_INSTALLED" ]; then
    set +e

    puts-cmd "python $MANAGE_FILE get_static_files_manifest"

    # Run get_static_files_manifest, cleanup some of the noisy output.
    python $MANAGE_FILE get_static_files_manifest --traceback 2>&1 | sed '/^Post-processed/d;/^Copying/d;/^$/d' | indent
    COLLECTSTATIC_STATUS="${PIPESTATUS[0]}"

    set -e

    # Display a warning if get_static_files_manifest failed.
    [ $COLLECTSTATIC_STATUS -ne 0 ] && {

        echo
        echo " !     Error while running '$ python $MANAGE_FILE get_static_files_manifest'."
        echo "       See traceback above for details."

        # Abort the build.
        exit 1
    }

    echo
fi

bpwatch stop getstaticmanifest  # metrics collection
